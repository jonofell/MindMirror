import { serve } from "https://deno.land/std@0.177.0/http/server.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "Content-Type, apikey, authorization, x-client-info",
  "Access-Control-Allow-Methods": "POST, OPTIONS"
};

const openaiKey = Deno.env.get("OPENAI_API_KEY");

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    const { entries, mood, timestamp } = await req.json();

    if (!entries || !Array.isArray(entries)) {
      throw new Error("Missing or invalid 'entries' array.");
    }

    const formatted = entries
      .map((e: { prompt?: string; response: string }) => {
        return e.prompt
          ? `Prompt: ${e.prompt}\nResponse: ${e.response}`
          : `Response: ${e.response}`;
      })
      .join("\n\n");

    const reflectionPrompt = `
You're a journaling assistant. A user has written the following responses to journaling prompts. Their selected mood is "${mood}". Read all the entries and generate a short, supportive reflection to help them understand their thoughts.

Entries:
${formatted}
`;

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${openaiKey}`
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: "You are a journaling assistant. Reflect briefly and supportively on the user's thoughts."
          },
          {
            role: "user",
            content: reflectionPrompt
          }
        ],
        temperature: 0.7,
        max_tokens: 100
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("OpenAI API Error:", errorText);
      throw new Error("OpenAI API call failed.");
    }

    const data = await response.json();
    const reflection = data.choices?.[0]?.message?.content || "Couldnâ€™t generate a reflection.";

    return new Response(
      JSON.stringify({ reflection }),
      {
        headers: {
          ...corsHeaders,
          "Content-Type": "application/json"
        }
      }
    );
  } catch (err) {
    console.error("Function Error:", err);
    return new Response(
      JSON.stringify({ error: "Internal Server Error" }),
      {
        status: 500,
        headers: {
          ...corsHeaders,
          "Content-Type": "application/json"
        }
      }
    );
  }
});
