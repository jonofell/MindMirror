import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "Content-Type, apikey, authorization, x-client-info",
  "Access-Control-Allow-Methods": "POST, OPTIONS"
};
const openaiKey = Deno.env.get("OPENAI_API_KEY");
serve(async (req)=>{
  if (req.method === "OPTIONS") {
    return new Response("ok", {
      headers: corsHeaders
    });
  }
  try {
    const { entries, mood, timestamp } = await req.json();
    if (!entries || !Array.isArray(entries)) {
      throw new Error("Missing or invalid 'entries' array.");
    }
    const formatted = entries.map((e)=>{
      const promptText = e.prompt ? `Prompt: ${e.prompt}` : null;
      const responseText = e.response ? `Response: ${e.response}` : null;
      return [
        promptText,
        responseText
      ].filter(Boolean).join("\n");
    }).join("\n\n");
    const reflectionPrompt = `
You are a thoughtful and perceptive journaling assistant. The user's mood is "${mood}", but your reflection should primarily focus on the **content and events** described in their most recent journal entry. Use the user's **own words and actions** to craft a grounded reflection that helps them notice patterns, intentions, or overlooked meanings in what they wrote.

Only refer to the user's mood if it clearly connects to the entry. You may gently reference past entries if they provide meaningful context or contrast, but keep the focus on the current entry.

Here are their entries (most recent first):
${formatted}
`;
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${openaiKey}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: "You are a journaling assistant. Reply with a short and supportive reflection based on the user's thoughts."
          },
          {
            role: "user",
            content: reflectionPrompt
          }
        ],
        temperature: 0.7,
        max_tokens: 100
      })
    });
    if (!response.ok) throw new Error(await response.text());
    const data = await response.json();
    const reflection = data.choices?.[0]?.message?.content || "Couldnâ€™t generate a reflection.";
    return new Response(JSON.stringify({
      reflection
    }), {
      headers: {
        ...corsHeaders,
        "Content-Type": "application/json"
      }
    });
  } catch (error) {
    console.error("Edge function error:", error);
    return new Response(JSON.stringify({
      error: error.message
    }), {
      status: 500,
      headers: {
        ...corsHeaders,
        "Content-Type": "application/json"
      }
    });
  }
});
